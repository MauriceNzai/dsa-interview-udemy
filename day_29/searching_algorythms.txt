# Day 29: Goals(Searching Algorithms):

## Question 1:

Find First and Last Position of Element in Sorted Array-You are given an array of integers sorted in non-decreasing order, find the starting and ending position of a given target value. If target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.

### Clarifying Questions



### Test Cases

[1,2,2,2,3]   target=2      =>  [1,3]
[1,2,3,4,5]   target=3      =>  [2,2]
[]            target=1      =>  [-1,-1]
[2,3,7,8,7]   target=10     =>  [-1,-1]

### Approaches

#### modified binary search
will use binary search 2 times
1st to find left extreeme value and
2nd to find left extreeme value

left and right pointers (index0 and n-1 respectively)
find middle by getting floor division by 2 of left+right
if mid != target, continue with normal binary search
if mid == target, modification as follows

1) check if mid == 0 (leftmost index)
    => leftmost value is found; return mid
    else:
        => check if value at mid-1 == target
            if not the leftmost =mid; return mid
            else:
                =>do binary search on left side of array to get left extreeme
                shift right = mid - 1

2) check if mid == len(array)-1 (rightmost index)
    => rightmost value is found; return mid
    else:
         => check if value at mid+1 == target
            if not the righttmost =mid; return mid
            else:
                => do binary search on right side of array to get right extreeme
                shift lef = mid + 1

### Pseudocode

## Question 2:

Search in 2D Array-Write an efficient algorithm that searches for a value target in an m x n integer matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.

The first integer of each row is greater than the last integer of the previous row.

If the value is there in the matrix return true, else false.

### Clarifying Questions


### Test Cases

[[1,2,3],
 [4,5,6],
 [7,8,9]]   =>  True

[[]]        =>  False

### Approaches

#### Brute Force
go through all the elements

### Binary Search Approach

using binary search find the relevent row
top = 0, bottom= m-1,   mid= (top+mid)//2
check index 0 and n-1 to determine if any == target
if target < index0 => shift bottom to mid-1
if target > index n-1   => shift top to mid+1
repeat while top<= top

do binary search on the row to determine if target is present
left=0, right=n-1, mid=(left+right)//2
normal binary search

### Pseudocode

## Question 2:
